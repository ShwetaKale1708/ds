bully.py
----
class Bully:
    def __init__(self, process_id, processes):
        self.process_id = process_id
        self.processes = processes
        self.leader_id = None

    def send_election_message(self, process_id):
        print(f"Process {self.process_id} sent election message to process {process_id}")
        return True

    def start_election(self):
        higher_processes = [p for p in self.processes if p > self.process_id]
        for p in higher_processes:
            response = self.send_election_message(p)
            if response:
                print(f"Process {p} responded to process {self.process_id}")
                self.leader_id = p
                return
        self.declare_leader()

    def declare_leader(self):
        self.leader_id = self.process_id
        print(f"Process {self.process_id} is the leader")

    def send_coordinator_message(self):
        lower_processes = [p for p in self.processes if p < self.process_id]
        for p in lower_processes:
            print(f"Process {self.process_id} sent coordinator message to process {p}")

    def run(self):
        self.start_election()
        if self.leader_id == self.process_id:
            self.send_coordinator_message()
            
processes = [1, 2, 3, 4, 5]

for process_id in processes:
    process = Bully(process_id, processes)
    process.run()
-----------------------------------------------

ring.py
---
class Pro:
	def __init__(self, id):
		self.id = id
		self.act = True

class GFG:
	def __init__(self):
		self.TotalProcess = 0
		self.process = []
	
	def initialiseGFG(self):
		print("No of processes 5")
		self.TotalProcess = 5
		self.process = [Pro(i) for i in range(self.TotalProcess)]
	
	def Election(self):
		print("Process no " + str(self.process[self.FetchMaximum()].id) + " fails")
		self.process[self.FetchMaximum()].act = False
		print("Election Initiated by 2")
		initializedProcess = 2

		old = initializedProcess
		newer = old + 1

		while (True):
			if (self.process[newer].act):
				print("Process " + str(self.process[old].id) + " pass Election(" + str(self.process[old].id) + ") to" + str(self.process[newer].id))
				old = newer
			newer = (newer + 1) % self.TotalProcess
			if (newer == initializedProcess):
				break

		print("Process " + str(self.process[self.FetchMaximum()].id) + " becomes coordinator")
		coord = self.process[self.FetchMaximum()].id

		old = coord
		newer = (old + 1) % self.TotalProcess
		while (True):
			if (self.process[newer].act):
				print("Process " + str(self.process[old].id) + " pass Coordinator(" + str(coord) + ") message to process " + str(self.process[newer].id))
				old = newer
			newer = (newer + 1) % self.TotalProcess
			if (newer == coord):
				print("End Of Election ")
				break
	
	def FetchMaximum(self):
		maxId = -9999
		ind = 0
		for i in range(self.TotalProcess):
			if (self.process[i].act and self.process[i].id > maxId):
				maxId = self.process[i].id
				ind = i
		return ind

def main():
	object = GFG()
	object.initialiseGFG()
	object.Election()

if __name__ == "__main__":
	main()

